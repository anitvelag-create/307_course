import tkinter as tk
from tkinter import ttk, messagebox


class CarWashApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("üöó –ê–≤—Ç–æ–º–æ–π–∫–∞ –ü—Ä–µ–º–∏—É–º")
        self.geometry("800x750")
        self.configure(bg='#f0f0f0')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.service_list = [("–ú–æ–π–∫–∞ –∫—É–∑–æ–≤–∞", 800), ("–í–∞–∫—É—É–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞", 1200)]
        self.date_list = ["2024-06-01", "2024-06-02", "2024-06-03"]
        self.car_list = ["BMW X5", "Audi A4"]
        self.client_list = ["–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"]
        self.staff_list = ["–ú–∞—Ä–∏—è", "–ê–ª–µ–∫—Å–µ–π"]

        self.records = []

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.main_frame = ttk.Frame(self)
        self.main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill='x', pady=(0, 10))

        ttk.Label(header_frame, text="üöó –ê–≤—Ç–æ–º–æ–π–∫–∞ –ü—Ä–µ–º–∏—É–º",
                  font=('Arial', 16, 'bold'),
                  foreground='#2c3e50').pack(pady=5)

        ttk.Label(header_frame, text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏",
                  font=('Arial', 10),
                  foreground='#7f8c8d').pack()

        self.notebook = ttk.Notebook(self.main_frame, height=350)
        self.notebook.pack(fill='both', expand=True, pady=(0, 10))

        self.create_service_tab()
        self.create_date_tab()
        self.create_car_tab()
        self.create_client_tab()
        self.create_staff_tab()

        self.create_records_section()
        self.create_records_display()

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
        style.configure('TFrame', background='#f0f0f0')
        style.configure('TLabel', background='#f0f0f0', font=('Arial', 9))
        style.configure('TButton', font=('Arial', 9))
        style.configure('TNotebook', background='#f0f0f0')
        style.configure('TNotebook.Tab', font=('Arial', 9, 'bold'))
        style.configure('Header.TLabel', font=('Arial', 11, 'bold'), foreground='#2c3e50')
        style.configure('Success.TButton', background='#27ae60', foreground='white')

    def create_service_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üéØ –£—Å–ª—É–≥–∏")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=15, pady=15)

        ttk.Label(container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –∞–≤—Ç–æ–º–æ–π–∫–∏",
                  style='Header.TLabel').grid(column=0, row=0, columnspan=2, pady=(0, 15), sticky='w')

        ttk.Label(container, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:").grid(column=0, row=1, padx=5, pady=8, sticky='w')
        ttk.Label(container, text="–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ (—Ä—É–±.):").grid(column=0, row=2, padx=5, pady=8, sticky='w')

        self.service_name_cb = ttk.Combobox(container, values=[name for name, _ in self.service_list],
                                            font=('Arial', 9), width=25)
        self.service_name_cb.grid(column=1, row=1, padx=5, pady=8, sticky='w')

        self.service_price_entry = ttk.Entry(container, font=('Arial', 9), width=15)
        self.service_price_entry.grid(column=1, row=2, padx=5, pady=8, sticky='w')

        add_btn = ttk.Button(container, text="üíæ –î–æ–±–∞–≤–∏—Ç—å / –û–±–Ω–æ–≤–∏—Ç—å",
                             command=self.add_service, width=20)
        add_btn.grid(column=1, row=3, padx=5, pady=12, sticky='w')

        # –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –≤ —Ä–∞–º–∫–µ
        list_frame = ttk.LabelFrame(container, text="–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
        list_frame.grid(column=0, row=4, columnspan=2, padx=5, pady=10, sticky='we')

        self.service_listbox = tk.Listbox(list_frame, height=8, width=60,
                                          font=('Arial', 9), bg='white',
                                          relief='solid', bd=1)
        self.service_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        self.update_service_listbox()

    def add_service(self):
        name = self.service_name_cb.get().strip()
        price_text = self.service_price_entry.get().strip()

        if not name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
            return
        if not price_text.isdigit():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        price = int(price_text)
        found = False
        for i, (n, p) in enumerate(self.service_list):
            if n == name:
                self.service_list[i] = (name, price)
                found = True
                break
        if not found:
            self.service_list.append((name, price))

        self.update_service_listbox()
        self.service_name_cb.set('')
        self.service_price_entry.delete(0, tk.END)
        self.update_records_comboboxes()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£—Å–ª—É–≥–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    def update_service_listbox(self):
        self.service_name_cb['values'] = [name for name, _ in self.service_list]
        self.service_listbox.delete(0, tk.END)
        for name, price in self.service_list:
            self.service_listbox.insert(tk.END, f"üéØ {name} - {price} —Ä—É–±.")

    def create_date_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üìÖ –î–∞—Ç—ã")

        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=15, pady=15)

        ttk.Label(container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞–º–∏ –∑–∞–ø–∏—Å–∏",
                  style='Header.TLabel').grid(column=0, row=0, columnspan=2, pady=(0, 15), sticky='w')

        ttk.Label(container, text="–î–∞—Ç–∞ (YYYY-MM-DD):").grid(column=0, row=1, padx=5, pady=8, sticky='w')

        self.date_cb = ttk.Combobox(container, values=self.date_list,
                                    font=('Arial', 9), width=20)
        self.date_cb.grid(column=1, row=1, padx=5, pady=8, sticky='w')

        add_btn = ttk.Button(container, text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É",
                             command=self.add_date, width=20)
        add_btn.grid(column=1, row=2, padx=5, pady=12, sticky='w')

        list_frame = ttk.LabelFrame(container, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã")
        list_frame.grid(column=0, row=3, columnspan=2, padx=5, pady=10, sticky='we')

        self.date_listbox = tk.Listbox(list_frame, height=8, width=60,
                                       font=('Arial', 9), bg='white')
        self.date_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        self.update_date_listbox()

    def add_date(self):
        date = self.date_cb.get().strip()
        if not date:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É")
            return
        if date not in self.date_list:
            self.date_list.append(date)
            self.update_date_listbox()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞—Ç–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å")
        self.date_cb.set('')
        self.update_records_comboboxes()

    def update_date_listbox(self):
        self.date_cb['values'] = self.date_list
        self.date_listbox.delete(0, tk.END)
        for date in sorted(self.date_list):
            self.date_listbox.insert(tk.END, f"üìÖ {date}")

    def create_car_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üöó –ú–∞—à–∏–Ω—ã")

        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=15, pady=15)

        ttk.Label(container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏",
                  style='Header.TLabel').grid(column=0, row=0, columnspan=2, pady=(0, 15), sticky='w')

        ttk.Label(container, text="–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:").grid(column=0, row=1, padx=5, pady=8, sticky='w')

        self.car_cb = ttk.Combobox(container, values=self.car_list,
                                   font=('Arial', 9), width=25)
        self.car_cb.grid(column=1, row=1, padx=5, pady=8, sticky='w')

        add_btn = ttk.Button(container, text="üöó –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É",
                             command=self.add_car, width=20)
        add_btn.grid(column=1, row=2, padx=5, pady=12, sticky='w')

        list_frame = ttk.LabelFrame(container, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
        list_frame.grid(column=0, row=3, columnspan=2, padx=5, pady=10, sticky='we')

        self.car_listbox = tk.Listbox(list_frame, height=8, width=60,
                                      font=('Arial', 9), bg='white')
        self.car_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        self.update_car_listbox()

    def add_car(self):
        car = self.car_cb.get().strip()
        if not car:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã")
            return
        if car not in self.car_list:
            self.car_list.append(car)
            self.update_car_listbox()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∞–∫–∞—è –º–∞—à–∏–Ω–∞ —É–∂–µ –µ—Å—Ç—å")
        self.car_cb.set('')
        self.update_records_comboboxes()

    def update_car_listbox(self):
        self.car_cb['values'] = self.car_list
        self.car_listbox.delete(0, tk.END)
        for car in self.car_list:
            self.car_listbox.insert(tk.END, f"üöó {car}")

    def create_client_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üë§ –ö–ª–∏–µ–Ω—Ç—ã")

        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=15, pady=15)

        ttk.Label(container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                  style='Header.TLabel').grid(column=0, row=0, columnspan=2, pady=(0, 15), sticky='w')

        ttk.Label(container, text="–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:").grid(column=0, row=1, padx=5, pady=8, sticky='w')

        self.client_cb = ttk.Combobox(container, values=self.client_list,
                                      font=('Arial', 9), width=25)
        self.client_cb.grid(column=1, row=1, padx=5, pady=8, sticky='w')

        add_btn = ttk.Button(container, text="üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
                             command=self.add_client, width=20)
        add_btn.grid(column=1, row=2, padx=5, pady=12, sticky='w')

        list_frame = ttk.LabelFrame(container, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
        list_frame.grid(column=0, row=3, columnspan=2, padx=5, pady=10, sticky='we')

        self.client_listbox = tk.Listbox(list_frame, height=8, width=60,
                                         font=('Arial', 9), bg='white')
        self.client_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        self.update_client_listbox()

    def add_client(self):
        client = self.client_cb.get().strip()
        if not client:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞")
            return
        if client not in self.client_list:
            self.client_list.append(client)
            self.update_client_listbox()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–ª–∏–µ–Ω—Ç {client} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å")
        self.client_cb.set('')
        self.update_records_comboboxes()

    def update_client_listbox(self):
        self.client_cb['values'] = self.client_list
        self.client_listbox.delete(0, tk.END)
        for client in self.client_list:
            self.client_listbox.insert(tk.END, f"üë§ {client}")

    def create_staff_tab(self):
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")

        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=15, pady=15)

        ttk.Label(container, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
                  style='Header.TLabel').grid(column=0, row=0, columnspan=2, pady=(0, 15), sticky='w')

        ttk.Label(container, text="–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:").grid(column=0, row=1, padx=5, pady=8, sticky='w')

        self.staff_cb = ttk.Combobox(container, values=self.staff_list,
                                     font=('Arial', 9), width=25)
        self.staff_cb.grid(column=1, row=1, padx=5, pady=8, sticky='w')

        add_btn = ttk.Button(container, text="üë®‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                             command=self.add_staff, width=20)
        add_btn.grid(column=1, row=2, padx=5, pady=12, sticky='w')

        list_frame = ttk.LabelFrame(container, text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–æ–π–∫–∏")
        list_frame.grid(column=0, row=3, columnspan=2, padx=5, pady=10, sticky='we')

        self.staff_listbox = tk.Listbox(list_frame, height=8, width=60,
                                        font=('Arial', 9), bg='white')
        self.staff_listbox.pack(fill='both', expand=True, padx=5, pady=5)
        self.update_staff_listbox()

    def add_staff(self):
        staff = self.staff_cb.get().strip()
        if not staff:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return
        if staff not in self.staff_list:
            self.staff_list.append(staff)
            self.update_staff_listbox()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å")
        self.staff_cb.set('')
        self.update_records_comboboxes()

    def update_staff_listbox(self):
        self.staff_cb['values'] = self.staff_list
        self.staff_listbox.delete(0, tk.END)
        for staff in self.staff_list:
            self.staff_listbox.insert(tk.END, f"üë®‚Äçüíº {staff}")

    def create_records_section(self):
        frame = ttk.LabelFrame(self.main_frame, text="‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É")
        frame.pack(fill='x', pady=(0, 10))

        container = ttk.Frame(frame)
        container.pack(fill='x', padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–£—Å–ª—É–≥–∞:", "–î–∞—Ç–∞:", "–ú–∞—à–∏–Ω–∞:", "–ö–ª–∏–µ–Ω—Ç:", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫:"]
        for i, header in enumerate(headers):
            ttk.Label(container, text=header, font=('Arial', 9, 'bold')).grid(
                column=i, row=0, padx=3, pady=5, sticky='w')

        # –ö–æ–º–±–æ–±–æ–∫—Å—ã
        self.record_service_cb = ttk.Combobox(container, font=('Arial', 9), width=15)
        self.record_service_cb.grid(column=0, row=1, padx=3, pady=5, sticky='we')

        self.record_date_cb = ttk.Combobox(container, font=('Arial', 9), width=12)
        self.record_date_cb.grid(column=1, row=1, padx=3, pady=5, sticky='we')

        self.record_car_cb = ttk.Combobox(container, font=('Arial', 9), width=15)
        self.record_car_cb.grid(column=2, row=1, padx=3, pady=5, sticky='we')

        self.record_client_cb = ttk.Combobox(container, font=('Arial', 9), width=15)
        self.record_client_cb.grid(column=3, row=1, padx=3, pady=5, sticky='we')

        self.record_staff_cb = ttk.Combobox(container, font=('Arial', 9), width=15)
        self.record_staff_cb.grid(column=4, row=1, padx=3, pady=5, sticky='we')

        add_record_btn = ttk.Button(container, text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å",
                                    command=self.add_record, width=15)
        add_record_btn.grid(column=4, row=2, padx=3, pady=10, sticky='e')

        self.update_records_comboboxes()

    def update_records_comboboxes(self):
        self.record_service_cb['values'] = [name for name, _ in self.service_list]
        self.record_date_cb['values'] = sorted(self.date_list)
        self.record_car_cb['values'] = self.car_list
        self.record_client_cb['values'] = self.client_list
        self.record_staff_cb['values'] = self.staff_list

    def add_record(self):
        service = self.record_service_cb.get().strip()
        date = self.record_date_cb.get().strip()
        car = self.record_car_cb.get().strip()
        client = self.record_client_cb.get().strip()
        staff = self.record_staff_cb.get().strip()

        if not all([service, date, car, client, staff]):
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return

        price = 0
        for name, p in self.service_list:
            if name == service:
                price = p
                break

        record = {
            'service': service,
            'date': date,
            'car': car,
            'client': client,
            'staff': staff,
            'price': price
        }
        self.records.append(record)
        self.update_records_display()

        self.record_service_cb.set('')
        self.record_date_cb.set('')
        self.record_car_cb.set('')
        self.record_client_cb.set('')
        self.record_staff_cb.set('')

        messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    def create_records_display(self):
        frame = ttk.LabelFrame(self.main_frame, text="üìã –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏")
        frame.pack(fill='both', expand=True)

        container = ttk.Frame(frame)
        container.pack(fill='both', expand=True, padx=10, pady=10)

        columns = ("–£—Å–ª—É–≥–∞", "–¶–µ–Ω–∞", "–î–∞—Ç–∞", "–ú–∞—à–∏–Ω–∞", "–ö–ª–∏–µ–Ω—Ç", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        tree_frame = ttk.Frame(container)
        tree_frame.pack(fill='both', expand=True)

        self.records_tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=8)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
        column_widths = [120, 80, 100, 120, 120, 100]
        for col, width in zip(columns, column_widths):
            self.records_tree.heading(col, text=col)
            self.records_tree.column(col, width=width, anchor='center')

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.records_tree.yview)
        self.records_tree.configure(yscrollcommand=scrollbar.set)

        self.records_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.Frame(container)
        stats_frame.pack(fill='x', pady=(10, 0))

        self.stats_label = ttk.Label(stats_frame, text="–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: 0",
                                     font=('Arial', 9, 'bold'), foreground='#2c3e50')
        self.stats_label.pack(side='left')

    def update_records_display(self):
        for item in self.records_tree.get_children():
            self.records_tree.delete(item)

        for record in self.records:
            self.records_tree.insert("", "end", values=(
                record['service'],
                f"{record['price']} —Ä—É–±.",
                record['date'],
                record['car'],
                record['client'],
                record['staff']
            ))

        self.stats_label.config(text=f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.records)}")


if __name__ == "__main__":
    app = CarWashApp()
    app.mainloop()